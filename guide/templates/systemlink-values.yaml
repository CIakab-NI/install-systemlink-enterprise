## Default values for systemlink.
## This is a YAML-formatted file.
## Declare override values for variables.

## Global variables expected to be inherited from parent helm charts which apply to the entire application.
##
global:
  ## Host names for the cluster's UI ingress controller.
  # !!!TODO!!! - Set this to the DNS address where the SystemLink UI will be hosted.
  ##
  hosts: &uiHosts ["systemlink.example.com"]
  ## Host names for the cluster's API ingress controller.
  # !!!TODO!!! - Set this to the DNS address to be used for communication between client systems and the SystemLink API.
  ##
  apiHosts: ["systemlink-api.example.com"]
  ## Defines secrets required if containers are hosted on a private image repository.
  ##
  imagePullSecrets: &pullSecretsRef
  - name: niartifacts-secret
  ## Overrides the default image registry.
  # !!!TODO!!! - Use this override if mirroring the SystemLink container registry.
  ##
  ## imageRegistry: "niartifacts.jfrog.io/ni-docker"
  # !!!TODO!!! - Set to false if you do not want to manage secrets as part of the Helm installation.
  ##
  deploySecrets: true

## Core configuration for the SystemLink web application.
##
webserver:
  ## Values used to configure OIDC providers.
  # !!!TODO!!! - Configure you OpenID Connect provider here, as well as the claims to make available to the SystemLink application.
  #    Consult your provider's documentation regarding exposing scopes to clients.
  ##
  oidc:
    ## Required - Secret name that holds client ID, client secret, and JWKs.
    ##
    secretName: "oidc-secret"
    ## Required - Include either issuer URL (for discovery) or the provider configuration as JSON wrapped in single quotes.
    ##
    issuer: "https://oidc.example.com/"
    # provider: '<provider-config-json>'
    ## Optional - Claim to use for user ID.
    ##
    # userIDClaim: "email"
    ## Optional - Claim to use for user name.
    ##
    # usernameClaim: "name"
    ## Optional - Scopes requested from the provider.
    ## At minimum, "openid" scope is required, "email" and "profile" are required to populate user preferences
    ##
    scope: "openid email profile"

## Defines an initial administrator role mapping, allowing an initial user or users to access the system.
## At least one user must be defined during installation to allow access to the application. The initial user(s) can then provision
## access for further users. By default, users are only created on install, not during upgrades.
##
initialAdministratorMapping:
  ## Overrides default behavior and creates or updates an administrator user mapping on upgrade.
  # !!!TODO!!! - If true, the configured administrator will be reconfigured on upgrade.
  ##
  createOnUpgrade: false
  ## The mapping type used to define the administrator user.
  ##
  mappingType: "oidc-claim"
  ## The property used to match mappingValue.
  ##
  mappingKey: "email"
  ## The property value used to identify admin users. This value is required when creating a new user mapping.
  ## To avoid unwanted information disclosure, it is recommended to only set this value when creating a new mapping.
  # !!!TODO!!! - Choose an initial system administrator here. You must configure an administrator to enable access
  #   to the SystemLink application. This example shows configuring an administrator by email address, but any
  #   OpenID Connect claim can be used to define this mapping.
  ##
  mappingValue: "user@example.com"

## Shared database configuration.
##
database:
  ## If using an externally managed PostgresSQL database, this value can be used to define a public TLS certificate used
  ## to authenticate with that database. The following argument can be used to load a certificate file from disk as part of a
  ## Helm install/upgrade command:
  ##       --set-file database.postgresCertificate my-cert.pem
  ##
  postgresCertificate: ""
  ## Name that will be used for this certificate when mounted on disk.
  ##
  postgresCertificateFileName: &postgresCertificateFileName "postgres-tls-certificate.pem"
  ## Name of the ConfigMap used to deploy the certificate.
  ##
  postgresCertificateConfigMapName: &postgresCertificateConfigMap "postgres-tls-certificate"

## MinIO block storage configuration.
##
minio:
  ## Setup user credentials.
  ##
  auth:
    existingSecret: minio-credentials
  ingress:
    ## Enable ingress controller resource.
    # !!!TODO!!! - Enable this toggle and configure a host name to allow access to the MinIO UI
    ##
    enabled: false
    ## @param ingress.hostname Default host for the ingress resource.
    ##
    hostname: "minio.example.com"

  ## Configure the ingress resource that allows you to access the MinIO API.
  ## ref: https://kubernetes.io/docs/user-guide/ingress/
  ##
  apiIngress:
    ## Enable ingress controller resource.
    ##
    enabled: true
    ## Default host for the ingress resource.
    # !!TODO!! - Set this to the DNS address where the MinIO API will be hosted.
    ##
    hostname: &minioApiHost "minio-api.example.com"
  ## Comma, semi-colon or space separated list of buckets to create at initialization (only in standalone mode).
  ##
  defaultBuckets: "systemlink-file-ingestion;systemlink-dataframe"

## Configuration for test result storage.
##
testmonitorservice:
  ## Database configuration
  ##
  database:
    ## The PostgreSQL database connection string
    ## NOTE: If specified, the `database.connectionInfo` parameters are ignored.
    ## If `database.tls.enabled` is set to `true`, the connection string must include the
    ## appropriate SSL Mode (Prefer or Require).
    # !!!TODO!!! - If connecting to an external PostgresSQL database, you must configure one of
    #    the connectionString and connectionInfo sections with the details of your database.
    ##
    connectionString:
      secretName: testmonitorservicedb-connection
      connectionStringKey: connection-string
    ## The PostgreSQL database connection info.
    ## NOTE: If the `database.connectionString` parameters are specified, the `database.connectionInfo`
    ## parameters are ignored.
    ##
    # connectionInfo:
    #     ## PostgreSQL host name.
    #     ##
    #     host: ""
    #     ## PostgreSQL port.
    #     ##
    #     port: ""
    #     ## PostgreSQL database name.
    #     ##
    #     dbName: nisystemlink
    #     ## PostgreSQL user name.
    #     ##
    #     user: nisystemlink
    #     ## The name of an existing secret with PostgreSQL connection credentials.
    #     ##
    #     secretName: ""
    #     ## Password key to be retrieved from existing secret.
    #     ## NOTE: Ignored unless `database.connectionInfo.secretName` parameter is set.
    #     ##
    #     passwordKey: password
  ## The PostgreSQL database TLS configuration
  ##
  tls:
    ## Enable TLS communication with the PostgreSQL database.
    ## NOTE: If set to true, the public TLS certificate from the server (.pem or .crt)
    ## must be uploaded to the cluster as a Kubernetes ConfigMap and its name and key
    ## be set under the `database.tls.existingConfigMap` and `database.tls.certificateSubPath`
    ## parameters respectively.
    ## Use the database.postgresCertificate value to autoamtically uplaod this certificate.
    ##
    enabled: true
    ## The name of an existing ConfigMap with a TLS certificate for the database.
    ##
    existingConfigMap: "postgres-tls-certificate"
    ## Certificate key to be retrieved from existing ConfigMap
    ##
    certificateSubPath: "postgres-tls-certificate.pem"

## Configuration for the Grafana dashboard provider.
##
dashboardhost:
  ## Name to use for the database access secret.
  ##
  databaseSecretName: &dashboardhostdbSecret "dashboardhost-postgres-secrets"

  ## Override Grafana ingress to enable pulling in globally-defined ingress annotation.
  ## The Grafana ingress is disabled by default so no further configuration is required under the "grafana" section.
  ##
  ingress:
    ## Enable the ingress.
    ##
    enabled: true
    ## For Kubernetes >= 1.18 you should specify the ingress-controller via the field ingressClassName
    ## See https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/#specifying-the-class-of-an-ingress
    # !!!TODO!!! - Configure you ingress controller class name.
    ##
    ingressClassName: "nginx"
    ## Values can be templated.
    ##
    annotations: {}
    labels: {}
    path: /dashboardhost
    ## pathType is only for k8s >= 1.1=.
    ##
    pathType: Prefix
    hosts: *uiHosts
    ## Extra paths to prepend to every host configuration. This is useful when working with annotation based services.
    ##
    extraPaths: []
    tls: []

  ## Grafana community chart configuration. See https://github.com/grafana/helm-charts/blob/main/charts/grafana/README.md
  ## for more documentation and examples for these values.
  ##
  grafana:
    ## This sets the GF_INSTALL_PLUGINS environment variable.
    ## https://grafana.com/docs/grafana/latest/installation/docker/#install-plugins-from-other-sources
    ##
    plugins:
      - https://repos.natinst.com/artifactory/rnd-app-builds/grafana-plugins/systemlink-notebook-datasource/systemlink-notebook-datasource-latest.zip;systemlink-notebook-datasource

    ## Node count. This must be set to 1 if Grafana is not configured to use an external database.
    ##
    replicas: 2

    ## Use an existing secret for the admin user.
    # !!!TODO!!! - Uncomment this section to use a different secret to configure the admin user.
    ##
    # admin:
    #   ## The name of an existing secret containing the admin credentials.
    #   existingSecret: "dashboardhost-login"
    #   ## The key in the existing admin secret containing the user name.
    #   userKey: admin-user
    #   ## The key in the existing admin secret containing the password.
    #   passwordKey: admin-password

    # ## Pass the plugins you want installed as a list.
    # !!!TODO!!! - Uncomment this section to specify plugins to install.
    ##
    # plugins: []
    #   # - digrich-bubblechart-panel
    #   # - grafana-clock-panel

    ## When adding additional data sources, take care to leave the systemlink-notebook-datasource entry in place, and add
    ## new entries after it.
    # !!!TODO!!! - Uncomment this to provision additional data sources (the chart provisions systemlink-notebook-datasource by default)
    ##
    # datasources:
    #   datasources.yaml:
    #     apiVersion: 1
    #     datasources:
    #     - name: SystemLink Notebooks
    #       type: systemlink-notebook-datasource
    #       access: direct
    #       url: /
    #       version: 1

    ## Defines additional mounts from Secrets.
    # !!!TODO!!! - This configures a connection to an external PostgresSQL. Remove this section if not using an external dataabase.
    ##
    extraSecretMounts:
      - name: *dashboardhostdbSecret
        secretName: *dashboardhostdbSecret
        defaultMode: 0440
        mountPath: /etc/secrets/dashboardhost
        readOnly: true

    ## Defines additional mounts from ConfigMaps.
    # !!!TODO!!! - This configures a connection to an external PostgresSQL. Remove this section if not using an external dataabase.
    ##
    extraConfigmapMounts:
      - name: *postgresCertificateConfigMap
        mountPath: /etc/ssl/certs/dashboardhost/
        subPath: *postgresCertificateFileName
        configMap: *postgresCertificateConfigMap
        readOnly: true

    ## Customize the grafana.ini file.
    ##
    grafana.ini:
      server:
        ## Host name for the Grafana instance.
        # !!!TODO!!! - The DNS address of the SystemLink application must be duplicated here.
        ##
        domain: "systemlink.example.com"

      ## Database configuration. See here for more documentation: https://grafana.com/docs/grafana/latest/administration/configuration/#database
      # !!!TODO!!! - This configures a connection to an external PostgresSQL. Remove this section if not using an external dataabase.
      ##
      database:
        ## Either mysql, postgres or sqlite3.
        ##
        type: postgres
        ## The database user (not applicable for sqlite3).
        ##
        user: $__file{/etc/secrets/dashboardhost/user}
        ## The database user’s password (not applicable for sqlite3). If the password contains # or ; you have to wrap it with triple quotes. For example """#password;""".
        ##
        password: $__file{/etc/secrets/dashboardhost/password}
        ## Only applicable to MySQL or Postgres. Includes IP or host name and port or in case of Unix sockets the path to it.
        ## For example, for MySQL running on the same host as Grafana: host = 127.0.0.1:3306 or with Unix sockets: host = /var/run/mysqld/mysqld.sock.
        ##
        host: $__file{/etc/secrets/dashboardhost/host}
        ## The name of the Grafana database. Leave it set to grafana (default) or some other name.
        ##
        # name: "database-name"
        ## Use either URL or the other fields above to configure the database.
        ## url: postgres://dashboardhost:abc123@dashboardhostpostgrescluster-primary.systemlink-nic2.svc:5432/grafana
        ## For PostgresSQL, use either disable, require or verify-full. For MySQL, use either true, false, or skip-verify.
        ##
        ssl_mode: require
        ## The path to the CA certificate to use. On many Linux systems, certs can be found in /etc/ssl/certs.
        # !!!TODO!!! - The filename here must mach database.postgresCertificateFileName.
        ##
        ca_cert_path: /etc/ssl/certs/dashboardhost/postgres-tls-certificate.pem

## Configuration for the Data Frame service.
##
dataframeservice:
  ## Configure S3/MinIO access.
  s3:
    ## The name of the S3 or MinIO bucket that the service should connect to.
    ##
    bucket: "systemlink-dataframe"
    ## This should just be the name of the scheme, without the trailing ://.
    ##
    schemeName: "https"
    ## Host name for S3 API access.
    ##
    host: *minioApiHost
    ## S3 Port.
    ##
    port: 443

## Salt configuration.
##
saltmaster:
  ## Configure the TCP ingress for the Salt API.
  ##
  serviceTCP:
    annotations:
      # !!!TODO!!! - ???
      metallb.universe.tf/address-pool: systemlink

## File upload configuration.
##
fileingestionservices:
  ## Configure S3/MinIO access.
  ##
  s3:
    ## Secret name for S3 credentials.
    ##
    existingSecret: "fileingestion-minio-keys"
    ## The name of the S3 or MinIO bucket that the service should connect to.
    ##
    bucket: "systemlink-dataframe"
    ## Set this to true to limit each user to a maximum of 1Gb of file storage.
    ##
    storageLimitsEnabled: false
    ## S3 connection scheme.
    ##
    schemeName: "https"
    ## Host name for S3 API access.
    ##
    host: *minioApiHost
    ## S3 Port
    ##
    port: 443

## Configuration for JupyterHub
##
sl-jupyterhub:
  jupyterhub:
    imagePullSecrets: *pullSecretsRef
