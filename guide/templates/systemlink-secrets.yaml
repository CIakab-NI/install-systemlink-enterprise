

## Default secret values for the systemlink Helm chart.
## This is a YAML-formatted file.
## Declare override values for variables.

## Secrets that apply to the entire application.
##
secrets:
  ## Container image repository credentials.
  ##
  imagePull:
    ## Toggle off to disable deployment of this specific secret. This should be done if this secret is being configured as a cluster setting
    ## rather than for this specific application.
    ##
    # !!!TODO!!! - Disable if the container repository credentials are configured elsewhere.
    deploySecret: true
    ## User for repository access. This information will have been provided with the application.
    ##
    user: "" # !!!TODO!!!
    ## Password for repository access. This information will have been provided with the application.
    ##
    password: ""  # !!!TODO!!!
  # MinIO block storage credentials.
  minio:
    ## User for MinIO access. This default can be used if desired.
    ##
    user: &minioUser "systemlink"
    # Password for MinIO access. No requirements are enforced on the format of this password.
    ##
    password: &minioPassword ""  # !!!TODO!!!
  ## RabbitMQ message bus credentials for service-to-service communication.
  ##
  rabbitmq:
    ## Password for RabbitMQ access. No requirements are enforced on the format of this password.
    ##
    password: ""  # !!!TODO!!!
    ## This cookie is used to authenticate containers in the RabbitMQ stateful set. Use a strong random sequence of characters.
    ##
    erlangCookie: ""  # !!!TODO!!!

## Secret configuration for the SystemLink web application.
##
webserver:
  secrets:
    ## Cryptographic key to be used for AES-128 encryption of session data. This key should have a length of 32 bytes.
    ##
    encryptionKey: ""  # !!!TODO!!!
    ## Cryptographic key to be used for SHA-256 signing of session data. This key should have a length between 32 and 64 bytes.
    ##
    signatureKey: ""  # !!!TODO!!!
    # Secrets used to configure the OpenID Connect provider.
    ##
    oidc:
      ## OpenID Connect client identifier for this application. This value will come from your authentication provider.
      ##
      clientId: ""  # !!!TODO!!!
      ## Secret associated with the clientId. This value will come from your authentication provider.
      ##
      clientSecret: ""  # !!!TODO!!!
      ## [Optional] A JSON web key set used to authenticate web tokens provided by the authentication provider.
      ##
      # jwks: ""

## Secret configuration for user management.
##
userservices:
  secrets:
    ## Credentials for the MongoDB cluster.
    ##
    mongodb:
      ## Root user password for the database cluster.
      ##
      rootPassword: ""  # !!!TODO!!!
      ## Password for the limited user allocated to allow the user service to access the database. Do not use a comma character in the password.
      ##
      userServicePassword: ""  # !!!TODO!!!
      ## Password for the limited user allocated to allow the key service to access the database. Do not use a comma character in the password.
      ##
      keyServicePassword: ""  # !!!TODO!!!
      ## Key used to authenticate pods in the database cluster.
      ## Refer to the MongoDB documentation for key generation: https://www.mongodb.com/docs/manual/tutorial/enforce-keyfile-access-control-in-existing-replica-set/#create-a-keyfile
      ##
      replicaSetKey: ""  # !!!TODO!!!
      ## A list of API keys. These keys are used to authorize service-to-service interactions within the application.
      ## Each entry must provide the name of the service assigned this key, the key, and a SHA-512 has of the key.
      ##
      whitelistedApiKeys: # !!!TODO!!!
        - serviceName: "assetmanagement"
          key: ""
          hash: "<SHA512 hash of key>"
        - serviceName: "jupyterhub"
          key: ""
          hash: "<SHA512 hash of key>"
        - serviceName: "nbexecworker"
          key: ""
          hash: "<SHA512 hash of key>"
        - serviceName: "saltmaster"
          key: ""
          hash: "<SHA512 hash of key>"
        - serviceName: "systemsmanagement-service"
          key: ""
          hash: "<SHA512 hash of key>"
        - serviceName: "webserver"
          key: ""
          hash: "<SHA512 hash of key>"

## Secret confiuration for Asset Management
##
assetmanagement:
  secrets:
      mongodb:
      ## Root user password for the database cluster.
      ##
      rootPassword: "" # !!!TODO!!!
      ## Password for the limited user allocated to allow the service to access the database. Do not use a comma character in the password.
      ##
      servicePassword: "" # !!!TODO!!!
      ## Key used to authenticate pods in the database cluster.
      ## Refer to mongodb documentation for key generation: https://www.mongodb.com/docs/manual/tutorial/enforce-keyfile-access-control-in-existing-replica-set/#create-a-keyfile
      ##
      replicaSetKey: "" # !!!TODO!!!

## Secret configuration for Grafana dashboard hosting.
##
dashboardhost:
  secrets:
    ## PostgresSQL Database credentials.
    ##
    database:
      ## Database host
      ##
      host: ""  # !!!TODO!!!
      ## User for database access. The default can be used.
      ##
      user: "systemlink"
      ## Password for database access.
      ##
      password: ""  # !!!TODO!!!
    # Admin credentials for the Grafana instance.
    grafana:
      ## Admin user name. The default can be used.
      ##
      user: "admin"
      ## Admin password.
      ##
      password: ""  # !!!TODO!!!

## Secret configuration for the data frame service.
##
dataframeservice:
  secrets:
    ## Access key information for S3/MinIO access.
    ##
    s3:
      ## Access key ID for the S3 instance.
      ##
      acccessKeyId: *minioUser
      ## Access key for the S3 instance.
      ##
      accessKey: *minioPassword
    ## Credentials for the MongoDB cluster.
    ##
    mongodb:
      ## Root user password for the database cluster. Ignored if database.useCustom is true.
      ##
      rootPassword: ""  # !!!TODO!!!
      ## Password for the limited user allocated to allow the service to access the database. Do not use a comma character in the password.
      ##
      servicePassword: ""  # !!!TODO!!!
      ## Key used to authenticate pods in the database cluster. Ignored if database.useCustom is true.
      ## Refer to the MongoDB documentation for key generation: https://www.mongodb.com/docs/manual/tutorial/enforce-keyfile-access-control-in-existing-replica-set/#create-a-keyfile
      ##
      replicaSetKey: ""  # !!!TODO!!!

## Secret configuration for file uploads.
##
fileingestionservices:
  secrets:
    ## Cryptographic key to be used for AES-256 encryption of data at rest. This key should have a length of 32 bytes.
    ##
    encryptionKey: ""  # !!!TODO!!!
    ## Access key information for S3/MinIO access.
    ## If using MinIO, use the user and password from the mino configuration above here. Otherwise, S3 credentials will need to be provided.
    ##
    s3:
      ## Access key ID for the S3 instance. Override if not using MinIO.
      ##
      acccessKeyId: *minioUser
      ## Access key for the S3 instance. Override if not using MinIO.
      ##
      accessKey: *minioPassword
      ## Default region for the S3 instance. Override if not using MinIO.
      ##
      defaultRegion: "us-east-1"
    ## Credentials for the MongoDB cluster.
    ##
    mongodb:
      ## Root user password for the database cluster.
      ##
      rootPassword: ""  # !!!TODO!!!
      ## Password for the limited user allocated to allow the service to access the database. Do not use a comma character in the password.
      ##
      servicePassword: ""  # !!!TODO!!!
      ## Key used to authenticate pods in the database cluster.
      ## Refer to the MongoDB documentation for key generation: https://www.mongodb.com/docs/manual/tutorial/enforce-keyfile-access-control-in-existing-replica-set/#create-a-keyfile
      ##
      replicaSetKey: ""  # !!!TODO!!!

## Secret configuration for Jupyter notebook execution.
##
nbexecservice:
  secrets:
    mongodb:
      ## Root user password for the database cluster.
      ##
      rootPassword: "" # !!!TODO!!!
      ## Password for the limited user allocated to allow the service to access the database. Do not use a comma character in the password.
      ##
      servicePassword: "" # !!!TODO!!!
      ## Key used to authenticate pods in the database cluster.
      ## Refer to mongodb documentation for key generation: https://www.mongodb.com/docs/manual/tutorial/enforce-keyfile-access-control-in-existing-replica-set/#create-a-keyfile
      ##
      replicaSetKey: "" # !!!TODO!!!

## Secret configuration for the systems event manager.
##
sysmgmtevent:
  secrets:
    ## Credentials for the MongoDB cluster.
    ##
    mongodb:
      ## Root user password for the database cluster.
      ##
      rootPassword: ""  # !!!TODO!!!
      ## Password for the limited user allocated to allow the service to access the database. Do not use a comma character in the password.
      ##
      servicePassword: ""  # !!!TODO!!!
      ## Key used to authenticate pods in the database cluster.
      ## Refer to the MongoDB documentation for key generation: https://www.mongodb.com/docs/manual/tutorial/enforce-keyfile-access-control-in-existing-replica-set/#create-a-keyfile
      ##
      replicaSetKey: ""  # !!!TODO!!!

## Secret configuration for systems management.
##
systems:
  secrets:
    ## Cryptographic key to be used for AES-128 encryption of data. This key should have a length of 32 bytes.
    ##
    encryptionKey: ""  # !!!TODO!!!
    ## Credentials for the MongoDB cluster.
    ##
    mongodb:
      ## Root user password for the database cluster.
      ##
      rootPassword: ""  # !!!TODO!!!
      ## Password for the limited user allocated to allow the service to access the database. Do not use a comma character in the password.
      ##
      servicePassword: ""  # !!!TODO!!!
      ## Key used to authenticate pods in the database cluster.
      ## Refer to the MongoDB documentation for key generation: https://www.mongodb.com/docs/manual/tutorial/enforce-keyfile-access-control-in-existing-replica-set/#create-a-keyfile
      ##
      replicaSetKey: ""  # !!!TODO!!!

## Secret configuration for test result storage.
##
testmonitorservice:
  secrets:
    ## Database configuration secrets. Only set one of connectionString or connectionPassword depending on whether
    ## the database is external or managed by this chart.
    ##
    database:
      ## Connection string for an existing PostgresSQL database.
      ## NOTE: Ignored unless `database.connectionString.secretName` parameter is set.
      ##
      connectionString: ""  # !!!TODO!!!
      ## Password to use for a PostgresSQL database created by this chart.
      ## NOTE: Ignored if `database.secretName` parameter is set.
      ##
      connectionPassword: ""  # !!!TODO!!!

## Secret configuration for document hosting
##
webappservices:
  secrets:
    ## Credentials for the MongoDB cluster.
    ##
    mongodb:
      ## Root user password for the database cluster.
      ##
      rootPassword: ""  # !!!TODO!!!
      ## Password for the limited user allocated to allow the service to access the database. Do not use a comma character in the password.
      ##
      servicePassword: ""  # !!!TODO!!!
      ## Key used to authenticate pods in the database cluster.
      ## Refer to the MongoDB documentation for key generation: https://www.mongodb.com/docs/manual/tutorial/enforce-keyfile-access-control-in-existing-replica-set/#create-a-keyfile
      ##
      replicaSetKey: ""  # !!!TODO!!!
    ## Key used to encrypt continuation tokens produced by the API. This is an AEAD key with a length of 256 bits.
    ##
    continuationTokenEncryptionKey: ""  # !!!TODO!!!
