

# Default values for systemlink.
# This is a YAML-formatted file.
# Declare override values for variables.

# Configuration stored as secrets. NI recommends to store secret configuration in a separate YAML
# file from other configuration and to use appropriate tooling to protect this configuration.
secrets:
  # Container image repository credentials.
  imagePull:
    # Toggle off to disable deployment of this specific secret. This should be done if this secret is being configured as a cluster setting
    # rather than for this specific application.
    deploySecret: true
    # User for repository access. This information will have been provided with the application.
    user: "<secret>"
    # Password for repository access. This information will have been provided with the application.
    password: "<secret>"
  # Minio block storage credentials.
  minio:
    # User for MinIO access. This default can be used if desired.
    user: &minioUser "systemlink"
    # Password for MinIO access. No requirements are enforced on the format of this password.
    password: &minioPassword "<secret>"
  # RabbitMQ message bus credentials for service-to-service communication.
  rabbitmq:
    # Password for RabbitMQ access. No requirements are enforced on the format of this password.
    password: "<secret>"
    # This cookie is used to authenticate containers in the RabbitMQ stateful set. Use a strong random sequence of characters.
    erlangCookie: "<secret>"

webserver:
  secrets:
    # Cryptographic key to be used for AES-128 encryption of session data. This key should have a length of 32 bytes.
    encryptionKey: "<secret>"
    # Cryptographic key to be used for SHA2556 signing of session data. This key should have a length between 32 and 64 bytes.
    signatureKey: "<secret>"
    # Secrets used to configure the OpenID Connect provider.
    oidc:
      # OpenID Connect client identifier for this application. This value will come from your authentication provider.
      clientId: "<secret>"
      # Secret associated with the clientId. This value will come from your authentication provider.
      clientSecret: "<secret>"
      # [Optional] A JSON web key set used to authenticate web tokens provided by the authentication provider.
      # jwks: "<secret>"

userservices:
  secrets:
    # Credentials for the MongoDB cluster.
    mongodb:
      # Root user password for the database cluster.
      rootPassword: "<secret>"
      # Password for the limited user allocated to allow the user service to access the database.
      userServicePassword: "<secret>"
      # Password for the limited user allocated to allow the key service to access the database.
      keyServicePassword: "<secret>"
      # Key used to authenticate pods in the database cluster.
      # Refer to MongoDB documentation for key generation: https://www.mongodb.com/docs/manual/tutorial/enforce-keyfile-access-control-in-existing-replica-set/#create-a-keyfile
      replicaSetKey: "<secret>"
      # A list of API keys. These keys are used to authorize service-to-service interactions within the application.
      # Each entry must provide the name of the service assigned this key, the key, and a SHA-512 has of the key.
      # TODO: Generation instructions for whitelisted keys.
      whitelistedApiKeys:
        - serviceName: "jupyterhub"
          key: "<secret>"
          hash: "<SHA512 hash of key>"
        - serviceName: "saltmaster"
          key: "<secret>"
          hash: "<SHA512 hash of key>"
        - serviceName: "systemsmanagement-service"
          key: "<secret>"
          hash: "<SHA512 hash of key>"
        - serviceName: "webserver"
          key: "<secret>"
          hash: "<SHA512 hash of key>"

dashboardhost:
  secrets:
    # Postgres Database credentials.
    database:
      # Database host
      host: "<secret>"
      # User for database access. The default can be used.
      user: "systemlink"
      # Pasword for database access.
      password: "<secret>"
    # Admin credentials for the Grafana instance.
    grafana:
      # Admin user name. The default can be used.
      user: "admin"
      # Admin password.
      password: "<secret>"

dataframeservice:
  secrets:
    # Access key information for S3/MinIO access.
    s3:
      # Access key ID for the S3 instance.
      acccessKeyId: *minioUser
      # Access key for the S3 instance.
      accessKey: *minioPassword
    # Credentials for the MongoDB cluster.
    mongodb:
      # Connection string to use if database.useCustom is true.
      # customConnectionString: "<secret>"
      # Root user password for the database cluster. Ignored if database.useCustom is true.
      rootPassword: "<secret>"
      # Password for the limited user allocated to allow the service to access the database. Ignored if database.useCustom is true.
      servicePassword: "<secret>"
      # Key used to authenticate pods in the database cluster. Ignored if database.useCustom is true.
      # Refer to mongoddb documentation for key generation: https://www.mongodb.com/docs/manual/tutorial/enforce-keyfile-access-control-in-existing-replica-set/#create-a-keyfile
      replicaSetKey: "<secret>"

fileingestionservices:
  secrets:
    # Cryptographic key to be used for AES-256 encryption of data at rest. This key should have a length of 32 bytes.
    encryptionKey: "<secret>"
    # Access key information for S3/MinIO access.
    # If using MinIO, use the user and password from the mino configuration above here. Otherwise, S3 credentials will need to be provided.
    s3:
      # Access key ID for the S3 instance. Override if not using MinIO
      acccessKeyId: *minioUser
      # Access key for the S3 instance. Override if not using MinIO
      accessKey: *minioPassword
      # Default region for the S3 instance. Override if not using MinIO
      defaultRegion: "us-east-1"
    # Credentials for the MongoDB cluster.
    mongodb:
      # Root user password for the database cluster.
      rootPassword: "<secret>"
      # Password for the limited user allocated to allow the service to access the database.
      servicePassword: "<secret>"
      # Key used to authenticate pods in the database cluster.
      # Refer to MongoDB documentation for key generation: https://www.mongodb.com/docs/manual/tutorial/enforce-keyfile-access-control-in-existing-replica-set/#create-a-keyfile
      replicaSetKey: "<secret>"

sysmgmtevent:
  secrets:
    # Credentials for the MongoDB cluster.
    mongodb:
      # Root user password for the database cluster.
      rootPassword: "<secret>"
      # Password for the limited user allocated to allow the service to access the database.
      servicePassword: "<secret>"
      # Key used to authenticate pods in the database cluster.
      # Refer to MongoDB documentation for key generation: https://www.mongodb.com/docs/manual/tutorial/enforce-keyfile-access-control-in-existing-replica-set/#create-a-keyfile
      replicaSetKey: "<secret>"

systems:
  secrets:
    # Cryptographic key to be used for AES-128 encryption of data. This key should have a length of 32 bytes.
    encryptionKey: "<secret>"
    # Credentials for the MongoDB cluster.
    mongodb:
      # Root user password for the database cluster.
      rootPassword: "<secret>"
      # Password for the limited user allocated to allow the service to access the database.
      servicePassword: "<secret>"
      # Key used to authenticate pods in the database cluster.
      # Refer to MongoDB documentation for key generation: https://www.mongodb.com/docs/manual/tutorial/enforce-keyfile-access-control-in-existing-replica-set/#create-a-keyfile
      replicaSetKey: "<secret>"

testmonitorservice:
  secrets:
    # Database configuration secrets. Only set one of connectionString or connectionPassword depending on whether
    # the database is external or managed by this chart.
    database:
      # Connection string for an existing PostgresSQL database.
      # NOTE: Ignored unless `database.connectionstring.existingSecret` parameter is set.
      connectionString: "<secret>"
      # Password to use for a PostgresSQL database created by this chart.
      # NOTE: Ignored if `database.connectionstring.existingSecret` parameter is set.
      connectionPassword: "<secret>"